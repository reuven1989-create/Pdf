import os
from flask import Flask, render_template, request
from PyPDF2 import PdfReader
from pdf2image import convert_from_path
import pytesseract
from openai import OpenAI
import faiss
import numpy as np

app = Flask(__name__)
client = OpenAI(api_key="YOUR_OPENAI_API_KEY")
OCR_LANG = "heb"

all_pages = []
embeddings_list = []
index = None

def extract_text_by_page(file_path):
    pages_text = []
    try:
        reader = PdfReader(file_path)
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                pages_text.append(page_text)
    except:
        pass
    if not pages_text:
        pages = convert_from_path(file_path)
        for page_image in pages:
            text = pytesseract.image_to_string(page_image, lang=OCR_LANG)
            pages_text.append(text)
    return pages_text

def add_pdf(file_path):
    global all_pages, embeddings_list, index
    pages = extract_text_by_page(file_path)
    all_pages.extend(pages)

    for page_text in pages:
        response = client.embeddings.create(
            model="text-embedding-3-small",
            input=page_text
        )
        embedding_vector = np.array(response.data[0].embedding, dtype=np.float32)
        embeddings_list.append(embedding_vector)
    
    dimension = len(embeddings_list[0])
    index = faiss.IndexFlatL2(dimension)
    index.add(np.array(embeddings_list))

def ask_question(question, top_k=3):
    if not all_pages:
        return "לא הועלו PDF עדיין."
    
    query_embedding = np.array(client.embeddings.create(
        model="text-embedding-3-small",
        input=question
    ).data[0].embedding, dtype=np.float32).reshape(1, -1)

    distances, indices = index.search(query_embedding, k=top_k)
    context = "\n\n".join([all_pages[i] for i in indices[0]])

    prompt = f"השתמש בהקשר הבא על מנת לענות על השאלה: \n{context}\n\nשאלה: {question}"
    response = client.chat.completions.create(
        model="gpt-4.1-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    return response.choices[0].message.content

@app.route("/", methods=["GET", "POST"])
def home():
    answer = ""
    if request.method == "POST":
        if "pdf" in request.files:
            file = request.files["pdf"]
            file_path = os.path.join("uploads", file.filename)
            os.makedirs("uploads", exist_ok=True)
            file.save(file_path)
            add_pdf(file_path)
        if "question" in request.form:
            question = request.form["question"]
            answer = ask_question(question)
    return render_template("index.html", answer=answer)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
